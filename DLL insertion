import java.lang.*;

class DoublyLinkedList {
    Node start;
    class Node {
        int data;
        Node next, prev;
        Node(int num) {
            data = num;
            next = null;
            prev = null;
        }
    }


    public void insertBeginning(int data) {
        // Creating newNode memory & assigning data value
        Node newNode = new Node(data);

        // If the list is empty, newNode becomes the start
    if (start == null) {
          start = newNode;
    } 
    else {
            newNode.next = start;
            start.prev = newNode;
            start = newNode;
       }
    }

    public void insertAfter(int pos, int data) {
        int size = calcSize(start);
        if (pos < 1 || size < pos)
    System.out.println("Invalid position");
        else {
        Node newNode = new Node(data);
            newNode.next = null;
          newNode.prev = null;
             Node tptr = start;
           while (--pos > 0) 
                tptr = tptr.next;
    
           
            tptr.next.prev = newNode;
            newNode.next = tptr.next;
           newNode.prev = tptr;
           tptr.next = newNode;
        }
    }
    public void displayDLL() {
        Node tptr = start;
        Node end = null;

        System.out.print("\nIn forward: ");
        while (tptr != null) {
            System.out.print(tptr.data + "->");
             end = tptr;
             tptr = tptr.next;
             
        }

        System.out.print("\nIn backward: ");
        while (end != null) {
            System.out.print(end.data + "<-");
            end = end.prev;
        }
        System.out.println();
    }
     public int calcSize(Node node){
        int size = 0;
        while(node!=null){
            node = node.next;
            size++;
        }
        return size;
    }
     public void insertEnd(int data) {
        // Creating newNode memory & assigning data value
        Node newNode = new Node(data);

        // assign data
        // since this will be the last node its next will be NULL
        newNode.next = null;

        //if we are entering the first node
        if (start == null) {
            start = newNode;
            newNode.prev = null;
            return;
        }

        Node tptr = start;

        // traverse to the current last node
        while (tptr.next != null)
            tptr = tptr.next;

        // assign current last node's next to this new node
        // assign new node's previous to this last node
        tptr.next = newNode;
        newNode.prev = tptr;
        // new_node becomes the last node now

    }
}

public class Main {
    public static void main(String args[]) {
        DoublyLinkedList obj = new DoublyLinkedList();

        obj.insertBeginning(3);
        obj.insertBeginning(2);
        obj.insertBeginning(1);

        obj.displayDLL();
       System.out.println(); 
        obj.insertEnd(4);
        obj.insertEnd(6);
    obj.insertEnd(7);
    obj.displayDLL();
    System.out.println(); 
    obj.insertAfter(3,100);
    obj.displayDLL();
    }
}
or

import java.util.Scanner;

class Node{
    Node pre;
    int data;
    Node next;
    Node(int data){
        this.pre=null;
        this.data=data;
        this.next=null;
    }
}
class insertionDeletion{
    Node head;
    public void insertion(int data,int pos){
        Node newNode= new Node(data);
        if(head==null){
            head=newNode;
        }
        else{
            if(pos==0){
                newNode.next=head;
                head.pre=newNode;
                head=newNode;
            }
            else{
                Node temp=head;
                while(pos>0 && temp!=null){
                    temp=temp.next;
                    pos--;
                }
                newNode.next=temp;
                newNode.pre=temp.pre;
                temp.pre.next=newNode;
                temp.pre=newNode;
            }
        }
    }
    public void deletion(int pos){
        if(head==null)
        System.out.print("List is empty");
        else{
            if(pos==0){
                head=head.next;
                head.pre=null;
                System.out.print("Deleted");
            }
            else{
                Node temp=head;
                while(pos>0&& temp.next!=null){
                    temp=temp.next;
                    pos--;
                }
                if(temp.next!=null){
                temp.pre.next=temp.next;
                temp.next.pre=temp.pre;
                }
                else if(temp.next==null){
                    temp.pre.next=null;
                }
            }
        }
        
    }
    public void display(){
        Node temp=head;
        while (temp!=null){
            System.out.print(temp.data +" ");
            temp=temp.next;
        }
    }
}
public class doubleLinked {
    public static void main(String[] args) {
       Scanner sc= new Scanner(System.in);
       insertionDeletion id = new insertionDeletion();
       id.insertion(10, 0); 
       id.insertion(20, 0); 
        id.insertion(30, 1);
        id.display();
        id.deletion(1); 
       id.display();
        sc.next();
    }
}
